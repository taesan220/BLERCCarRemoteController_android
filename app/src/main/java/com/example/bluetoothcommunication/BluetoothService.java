package com.example.bluetoothcommunication;import android.Manifest;import android.app.Activity;import android.app.Service;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothGatt;import android.bluetooth.BluetoothGattCallback;import android.bluetooth.BluetoothGattCharacteristic;import android.bluetooth.BluetoothGattService;import android.bluetooth.BluetoothManager;import android.bluetooth.BluetoothProfile;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.os.Binder;import android.os.Bundle;import android.os.IBinder;import android.util.Log;import android.widget.Button;import android.widget.ListView;import android.widget.Toast;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import java.io.Serializable;import java.util.ArrayList;import java.util.UUID;public class BluetoothService implements Serializable {    private static BluetoothService instance;    public static BluetoothService getInstance(){        if(instance == null){            instance = new BluetoothService();        }        return instance;    }    /**     * 새로운 블루투스 기기를 발견하면 호출되는 커스텀 리스너     */    public interface SearchingDevicesListener {        void searchingDevicesListener(BluetoothDevice addedDevices);    }    public void setSearchingDevicesListener(SearchingDevicesListener customListener) {        searchingDevicesListener = customListener;    }    /**     * 블루투스 기기와의 연결 완료시 호출되는 커스텀 리스너     */    public interface CompleteDeviceConnectionListener {        void completeDeviceConnectionListener();    }    public void setCompleteDeviceConnectionListener(CompleteDeviceConnectionListener customListener) {        completeDeviceConnectionListener = customListener;    }    /**     * 블루투스 기기로 부터 데이터를 받았을때 호출되는 커스텀 리스너     */    public interface ReceivedDataFromBluetoothDeviceListener {        void receivedDataFromBluetoothDeviceListener(String receivedString);    }    public void setReceivedDataFromBluetoothDeviceListener (ReceivedDataFromBluetoothDeviceListener customListener){        receivedDataFromBluetoothDeviceListener = customListener;    }    Context mCtx;    boolean isScanning = false;    BluetoothManager bluetoothManager;    //블루투스 매니저    //블루트스 기능을 총괄적으로 관리함.    BluetoothAdapter bluetoothAdapter;    //블루투스 연결자    //블루투스를 스켄하거나, 페어링된장치목록을 읽어들일 수 있습니다.    //이를 바탕으로 블루투스와의 연결을 시도할 수 있습니다.    ArrayList<BluetoothDevice> bleList;//리스트뷰 객체    //   BleList bleList = null;//리스트 어댑터    BluetoothDevice selectedBluetoothDevice; //선택된 블루투스 디바이스    BluetoothGattService bleService;    private BluetoothGatt bleGatt;    String stringUUID = "FFE0";    UUID uuid;    boolean isBluetoothDeviceConnected = false;    SearchingDevicesListener searchingDevicesListener;    CompleteDeviceConnectionListener completeDeviceConnectionListener;    ReceivedDataFromBluetoothDeviceListener receivedDataFromBluetoothDeviceListener;    public BluetoothService() {    }    public void setContext(Context context) {        mCtx = context;        mCtx = context;        //리스트뷰 설정        bleList = new ArrayList<>();        Log.d("GeneratorFunction", "ok");        if (bluetoothManager == null) {            try {                bluetoothManager = (BluetoothManager) mCtx.getSystemService(Context.BLUETOOTH_SERVICE);                bluetoothAdapter = bluetoothManager.getAdapter();            } catch (SecurityException e) {                Toast.makeText(mCtx, "블루투스 디바이스 아답타 생성 실패", Toast.LENGTH_SHORT).show();                Toast.makeText(mCtx, e.getLocalizedMessage(), Toast.LENGTH_SHORT).show();            }        }    }    public BluetoothService(Context context) {        super();        mCtx = context;        //리스트뷰 설정        bleList = new ArrayList<>();        Log.d("GeneratorFunction", "ok");        if (bluetoothManager == null) {        //    Toast.makeText(mCtx, "블루투스 디바이스 ㅆㅅ", Toast.LENGTH_SHORT).show();            try {                bluetoothManager = (BluetoothManager) mCtx.getSystemService(Context.BLUETOOTH_SERVICE);                bluetoothAdapter = bluetoothManager.getAdapter();            } catch (SecurityException e) {                Toast.makeText(mCtx, "블루투스 디바이스 아답타 생성 실패", Toast.LENGTH_SHORT).show();            }        }    }    //블루투스 장치 검색 시작할 수 있는 메소드    public void setStartSearchingDevices() {        if(bluetoothAdapter == null || !bluetoothAdapter.isEnabled()){            //블루투스를 지원하지 않거나 켜져있지 않으면 장치를끈다.            Toast.makeText(mCtx, "블루투스를 켜주세요", Toast.LENGTH_SHORT).show();            return;        }        isScanning = true;        bluetoothAdapter.startLeScan(leScanCallback);    }    // 스켄 이후 장치 발견 이벤트    private BluetoothAdapter.LeScanCallback leScanCallback = new BluetoothAdapter.LeScanCallback() {        @Override        public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {            Log.d("scan",device.getName() + " RSSI :" + rssi + " Record " + scanRecord); //           bleList.add(device);//    addDevice(device,rssi);            //bleList.notifyDataSetChanged();     //       Toast.makeText(mCtx, "블루투스 디바이스 발견", Toast.LENGTH_SHORT).show();            //todo 커스텀 리스너로 등록된 리스너에 전달            if (searchingDevicesListener != null) {                searchingDevicesListener.searchingDevicesListener(device);            }        }    };//===========================    //About Bluetooth Connection    public void selectedBluetoothDevice(BluetoothDevice selectedDevice) {        bluetoothAdapter.stopLeScan(leScanCallback);        isScanning = false;        selectedBluetoothDevice = selectedDevice;        if (selectedBluetoothDevice != null) {            Log.d("bluetooth", selectedBluetoothDevice.getName());            bleGatt = selectedBluetoothDevice.connectGatt(mCtx.getApplicationContext(), false, mGattCallback); //연결 시도        }        bleList.clear();    }    public void disConnectWithBluetoothDevice() {        bleGatt.disconnect();     //   leScanCallback = null;        isBluetoothDeviceConnected = false;        bleList.clear();    }    //장치 검색 중지    public void stopSearchingScan() {        bluetoothAdapter.stopLeScan(leScanCallback);        isScanning = false;        bleList.clear();    }     BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {        @Override        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {            super.onConnectionStateChange( gatt, status, newState );            if( status == BluetoothGatt.GATT_FAILURE ) {                disconnectBluetoothGatt();                return;            } else if( status != BluetoothGatt.GATT_SUCCESS ) {                disconnectBluetoothGatt();                return;            }            if( newState == BluetoothProfile.STATE_CONNECTED ) {                Log.d( "BLE", "Connected to the GATT server" );                gatt.discoverServices();            } else if ( newState == BluetoothProfile.STATE_DISCONNECTED ) {                disconnectBluetoothGatt();                return;            }        }        public void disconnectBluetoothGatt() {            Log.d( "Bluetooth", "Closing Gatt connection" );            if( bleGatt != null ) {                bleGatt.disconnect();                bleGatt.close();                isBluetoothDeviceConnected = false;            }        }        @Override        public void onServicesDiscovered(BluetoothGatt gatt, int status) {            //  super.onServicesDiscovered(gatt, status);            gatt.getDevice().getUuids();            uuid = UUID.nameUUIDFromBytes("FFE1".getBytes());       //FFE0            bleService = gatt.getService(UUID.fromString("0000FFE0-0000-1000-8000-00805F9B34FB"));            if (bleService != null) {                //                //   BluetoothGattCharacteristic bleCharacteristic = bleService.getCharacteristic(uuid);     //FFE1                //   Boolean status = bleGatt.writeCharacteristic(bleCharacteristic);                isBluetoothDeviceConnected = true;                //todo 블루투스 장치와의 연결 완료시 사용자 리스너 호출                if (completeDeviceConnectionListener != null) {                    completeDeviceConnectionListener.completeDeviceConnectionListener();                }            }        }        @Override        public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {            byte[] data = characteristic.getValue();            String receivedData = new String(data);            Log.d("onCharacteristicRead", "received String = " + receivedData);            //todo 받은 데이터를 전송하는 리스너 추가            if (receivedDataFromBluetoothDeviceListener != null) {                receivedDataFromBluetoothDeviceListener.receivedDataFromBluetoothDeviceListener(receivedData);            }        }        @Override        public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {            Log.d("onCharacteristicChanged", "come in");            Log.d("받음", "come in");            byte[] data = characteristic.getValue();            String receivedData = new String(data);            isBluetoothDeviceConnected = true;            //todo 받은 데이터를 전송하는 리스너 추가            receivedDataFromBluetoothDeviceListener.receivedDataFromBluetoothDeviceListener(receivedData);        }        @Override        public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {            Log.d("onCharacteristicWrite", "come in");        }        BroadcastReceiver mGattupdateReceiver = new BroadcastReceiver() {            @Override            public void onReceive(Context context, Intent intent) {                Log.d("받음", "come in");            }        };    };    //블루투스 기기로 문자를 전송할 수 있도록 하는 메소드    public void sendStringData(String StringData) {        sendSignalToBLE(bleService, uuid, StringData);    }    //블루투스 기기로 문자를 전송하는 메소드    public Boolean sendSignalToBLE (BluetoothGattService bleService, UUID uuid, String signal){        Boolean result = false;        if (bleService != null) {            BluetoothGattCharacteristic bleCharacteristic = bleService.getCharacteristic(UUID.fromString("0000FFE1-0000-1000-8000-00805F9B34FB"));            bleCharacteristic.setValue(signal);            bleGatt.setCharacteristicNotification(bleCharacteristic, true);            result = bleGatt.writeCharacteristic(bleCharacteristic);        }        return result;    }//    private final IBinder mBinder = new BluetoothService.LocalBinder();////    public class LocalBinder extends Binder {//        BluetoothService getService() {//            return BluetoothService.this;//        }//    }////    @Override//    public IBinder onBind(Intent intent) {//        return mBinder;//    }}